@extends('app-docs',[
	'DocsSidebarL' => menu('DocsGeneralSidebar'),
	'DocsSidebarR' => menu('DocsSummarySidebar')
])

@section('doc-title', 'Extendable Kompo Layouts')
@section('seo-title', 'Blade layouts are the backbones of your SPA.')

@section('doc-content')

<!-- ------------------------------------------------------------- -->
<div class="wave"></div>
<!-- ------------------------------------------------------------- -->
<h2>Default Kompo Layout</h2>
<!-- ------------------------------------------------------------- -->

<p>
  Kompo comes with a default blade template `kompo::app` with the following slots that will display menus and content: 
</p>

<default-blade-template :form="{{ new App\Forms\DefaultBladeTemplateForm() }}"></default-blade-template>
@tip(Other configurations are explained in docs below or in the examples section.)
<p>
    You may call a Form or Query directly from a route and they will be displayed in the <b>content</b> section.
</p>

<p>
  You may extend the default template as many times as you wish by specifying which menus, styles or scripts each template will use.
</p>

<!-- ------------------------------------------------------------- -->
<h3>Extending the layout</h3>

<p>
  For menus, you may extend the default template by injecting the following available slots `Navbar`, `LeftSidebar`, `RightSidebar` & `Footer`, which are all optional.
</p>

<pre><code class="language-php">//In your app.blade.php
&#64;extends('kompo::app', [
  'Navbar' => new App\Menus\Navbar(), 
  'LeftSidebar' => new App\Menus\LeftSidebar(), 
  'RightSidebar' => new App\Menus\RightSidebar(), 
  'Footer' => new App\Menus\Footer()
])</code></pre>


<!-- ------------------------------------------------------------- -->
<h3>Custom Styles & Scripts</h3>

<p>As shown above, you may add any kind of content in the `&lt;header>` section or at the bottom of your document in the `scripts` section thanks to Blade's `push` directive, which allows us to stack content in our HTML document. For example:
</p>

<pre><code class="language-html">`&#64;push`('header')
   &lt;meta http-equiv="x-ua-compatible" content="IE=edge">
`&#64;endpush`

`&#64;push`('scripts')
   &lt;script>
      $(document).ready(function(){
         console.log('Loaded!')
      })
   &lt;/script>
`&#64;endpush`</code></pre>


<p>In addition to that, if you have followed the `laravel-mix` default naming convention for assets, the template will also <b>automatically include the generated CSS and JS files</b> (assuming the files exist). The default naming convention is the following:</p>

<ul>
  <li>`css/app.css`</li>
  <li>`js/manifest.js`</li>
  <li>`js/vendor.js`</li>
  <li>`js/app.js`</li>
</ul>

<p>However, if you chose a different naming conventions or need to include multiple separate assets, you may pass an array of CSS and JS paths in the `VlStyles` and `VlScripts` variables:</p>

<pre><code class="language-php">&#64;extends('kompo::app', [
   'VlStyles' => [
      mix('css/main-styles.css'),
      asset('css/custom-styles.css')
   ],
   'VlScripts' => [
      mix('js/custom-manifest.js'),
      asset('js/vendor/custom-vendor.js'),
      mix('js/main-script.js')
   ]
])</code></pre>

<h3>Favicons</h3>

<p>
  Kompo currently offers a free template for favicons generated with <a href="https://realfavicongenerator.net" target="_blank">realfavicongenerator.net</a>. All you have to do is to dump the favicons generated by this site into your `public/favicon` folder and Kompo will pick it up.
</p>

<p>If you wish to use any other favicon assets, just push them in the `header` section.</p>

<pre><code class="language-html">`&#64;push`('header')
&lt;link rel="icon" type="image/png" href="favicon-32x32.png">
&lt;meta name="msapplication-TileColor" content="#da532c">
&lt;meta name="theme-color" content="#ffffff">
`&#64;endpush`</code></pre>


@endsection